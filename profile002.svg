<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN"
 "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<!-- Generated by graphviz version 2.43.0 (0)
 -->
<!-- Title: wordcount02 Pages: 1 -->
<svg width="100%" height="100%" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<script type="text/ecmascript"><![CDATA[
/**
 *  SVGPan library 1.2.2
 * ======================
 *
 * Given an unique existing element with id "viewport" (or when missing, the
 * first g-element), including the library into any SVG adds the following
 * capabilities:
 *
 *  - Mouse panning
 *  - Mouse zooming (using the wheel)
 *  - Object dragging
 *
 * You can configure the behaviour of the pan/zoom/drag with the variables
 * listed in the CONFIGURATION section of this file.
 *
 * Known issues:
 *
 *  - Zooming (while panning) on Safari has still some issues
 *
 * Releases:
 *
 * 1.2.2, Tue Aug 30 17:21:56 CEST 2011, Andrea Leofreddi
 *	- Fixed viewBox on root tag (#7)
 *	- Improved zoom speed (#2)
 *
 * 1.2.1, Mon Jul  4 00:33:18 CEST 2011, Andrea Leofreddi
 *	- Fixed a regression with mouse wheel (now working on Firefox 5)
 *	- Working with viewBox attribute (#4)
 *	- Added "use strict;" and fixed resulting warnings (#5)
 *	- Added configuration variables, dragging is disabled by default (#3)
 *
 * 1.2, Sat Mar 20 08:42:50 GMT 2010, Zeng Xiaohui
 *	Fixed a bug with browser mouse handler interaction
 *
 * 1.1, Wed Feb  3 17:39:33 GMT 2010, Zeng Xiaohui
 *	Updated the zoom code to support the mouse wheel on Safari/Chrome
 *
 * 1.0, Andrea Leofreddi
 *	First release
 *
 * This code is licensed under the following BSD license:
 *
 * Copyright 2009-2017 Andrea Leofreddi <a.leofreddi@vleo.net>. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification, are
 * permitted provided that the following conditions are met:
 *
 *    1. Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *    2. Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *    3. Neither the name of the copyright holder nor the names of its
 *       contributors may be used to endorse or promote products derived from
 *       this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY COPYRIGHT HOLDERS AND CONTRIBUTORS ''AS IS'' AND ANY EXPRESS
 * OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
 * AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
 * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * The views and conclusions contained in the software and documentation are those of the
 * authors and should not be interpreted as representing official policies, either expressed
 * or implied, of Andrea Leofreddi.
 */

"use strict";

/// CONFIGURATION
/// ====>

var enablePan = 1; // 1 or 0: enable or disable panning (default enabled)
var enableZoom = 1; // 1 or 0: enable or disable zooming (default enabled)
var enableDrag = 0; // 1 or 0: enable or disable dragging (default disabled)
var zoomScale = 0.2; // Zoom sensitivity

/// <====
/// END OF CONFIGURATION

var root = document.documentElement;

var state = 'none', svgRoot = null, stateTarget, stateOrigin, stateTf;

setupHandlers(root);

/**
 * Register handlers
 */
function setupHandlers(root){
	setAttributes(root, {
		"onmouseup" : "handleMouseUp(evt)",
		"onmousedown" : "handleMouseDown(evt)",
		"onmousemove" : "handleMouseMove(evt)",
		//"onmouseout" : "handleMouseUp(evt)", // Decomment this to stop the pan functionality when dragging out of the SVG element
	});

	if(navigator.userAgent.toLowerCase().indexOf('webkit') >= 0)
		window.addEventListener('mousewheel', handleMouseWheel, false); // Chrome/Safari
	else
		window.addEventListener('DOMMouseScroll', handleMouseWheel, false); // Others
}

/**
 * Retrieves the root element for SVG manipulation. The element is then cached into the svgRoot global variable.
 */
function getRoot(root) {
	if(svgRoot == null) {
		var r = root.getElementById("viewport") ? root.getElementById("viewport") : root.documentElement, t = r;

		while(t != root) {
			if(t.getAttribute("viewBox")) {
				setCTM(r, t.getCTM());

				t.removeAttribute("viewBox");
			}

			t = t.parentNode;
		}

		svgRoot = r;
	}

	return svgRoot;
}

/**
 * Instance an SVGPoint object with given event coordinates.
 */
function getEventPoint(evt) {
	var p = root.createSVGPoint();

	p.x = evt.clientX;
	p.y = evt.clientY;

	return p;
}

/**
 * Sets the current transform matrix of an element.
 */
function setCTM(element, matrix) {
	var s = "matrix(" + matrix.a + "," + matrix.b + "," + matrix.c + "," + matrix.d + "," + matrix.e + "," + matrix.f + ")";

	element.setAttribute("transform", s);
}

/**
 * Dumps a matrix to a string (useful for debug).
 */
function dumpMatrix(matrix) {
	var s = "[ " + matrix.a + ", " + matrix.c + ", " + matrix.e + "\n  " + matrix.b + ", " + matrix.d + ", " + matrix.f + "\n  0, 0, 1 ]";

	return s;
}

/**
 * Sets attributes of an element.
 */
function setAttributes(element, attributes){
	for (var i in attributes)
		element.setAttributeNS(null, i, attributes[i]);
}

/**
 * Handle mouse wheel event.
 */
function handleMouseWheel(evt) {
	if(!enableZoom)
		return;

	if(evt.preventDefault)
		evt.preventDefault();

	evt.returnValue = false;

	var svgDoc = evt.target.ownerDocument;

	var delta;

	if(evt.wheelDelta)
		delta = evt.wheelDelta / 360; // Chrome/Safari
	else
		delta = evt.detail / -9; // Mozilla

	var z = Math.pow(1 + zoomScale, delta);

	var g = getRoot(svgDoc);
	
	var p = getEventPoint(evt);

	p = p.matrixTransform(g.getCTM().inverse());

	// Compute new scale matrix in current mouse position
	var k = root.createSVGMatrix().translate(p.x, p.y).scale(z).translate(-p.x, -p.y);

        setCTM(g, g.getCTM().multiply(k));

	if(typeof(stateTf) == "undefined")
		stateTf = g.getCTM().inverse();

	stateTf = stateTf.multiply(k.inverse());
}

/**
 * Handle mouse move event.
 */
function handleMouseMove(evt) {
	if(evt.preventDefault)
		evt.preventDefault();

	evt.returnValue = false;

	var svgDoc = evt.target.ownerDocument;

	var g = getRoot(svgDoc);

	if(state == 'pan' && enablePan) {
		// Pan mode
		var p = getEventPoint(evt).matrixTransform(stateTf);

		setCTM(g, stateTf.inverse().translate(p.x - stateOrigin.x, p.y - stateOrigin.y));
	} else if(state == 'drag' && enableDrag) {
		// Drag mode
		var p = getEventPoint(evt).matrixTransform(g.getCTM().inverse());

		setCTM(stateTarget, root.createSVGMatrix().translate(p.x - stateOrigin.x, p.y - stateOrigin.y).multiply(g.getCTM().inverse()).multiply(stateTarget.getCTM()));

		stateOrigin = p;
	}
}

/**
 * Handle click event.
 */
function handleMouseDown(evt) {
	if(evt.preventDefault)
		evt.preventDefault();

	evt.returnValue = false;

	var svgDoc = evt.target.ownerDocument;

	var g = getRoot(svgDoc);

	if(
		evt.target.tagName == "svg"
		|| !enableDrag // Pan anyway when drag is disabled and the user clicked on an element
	) {
		// Pan mode
		state = 'pan';

		stateTf = g.getCTM().inverse();

		stateOrigin = getEventPoint(evt).matrixTransform(stateTf);
	} else {
		// Drag mode
		state = 'drag';

		stateTarget = evt.target;

		stateTf = g.getCTM().inverse();

		stateOrigin = getEventPoint(evt).matrixTransform(stateTf);
	}
}

/**
 * Handle mouse button release event.
 */
function handleMouseUp(evt) {
	if(evt.preventDefault)
		evt.preventDefault();

	evt.returnValue = false;

	var svgDoc = evt.target.ownerDocument;

	if(state == 'pan' || state == 'drag') {
		// Quit pan mode
		state = '';
	}
}
]]></script><g id="viewport" transform="scale(0.5,0.5) translate(0,0)"><g id="graph0" class="graph" transform="scale(1 1) rotate(0) translate(4 720)">
<title>wordcount02</title>
<polygon fill="white" stroke="transparent" points="-4,4 -4,-720 799.5,-720 799.5,4 -4,4"/>
<g id="clust1" class="cluster">
<title>cluster_L</title>
<polygon fill="none" stroke="black" points="8,-557 8,-708 512,-708 512,-557 8,-557"/>
</g>
<!-- File: wordcount02 -->
<g id="node1" class="node">
<title>File: wordcount02</title>
<g id="a_node1"><a xlink:title="wordcount02">
<polygon fill="#f8f8f8" stroke="black" points="504,-700 16,-700 16,-565 504,-565 504,-700"/>
<text text-anchor="start" x="24" y="-683.2" font-family="Times,serif" font-size="16.00">File: wordcount02</text>
<text text-anchor="start" x="24" y="-665.2" font-family="Times,serif" font-size="16.00">Type: cpu</text>
<text text-anchor="start" x="24" y="-647.2" font-family="Times,serif" font-size="16.00">Time: Feb 14, 2024 at 11:57am (UTC)</text>
<text text-anchor="start" x="24" y="-629.2" font-family="Times,serif" font-size="16.00">Duration: 203.58ms, Total samples = 20ms ( 9.82%)</text>
<text text-anchor="start" x="24" y="-611.2" font-family="Times,serif" font-size="16.00">Showing nodes accounting for 20ms, 100% of 20ms total</text>
<text text-anchor="start" x="24" y="-574.2" font-family="Times,serif" font-size="16.00">See https://git.io/JfYMW for how to read the graph</text>
</a>
</g>
</g>
<!-- N1 -->
<g id="node1" class="node">
<title>N1</title>
<g id="a_node1"><a xlink:title="main.main (20ms)">
<polygon fill="#edd5d5" stroke="#b20000" points="609.5,-514 522.5,-514 522.5,-478 609.5,-478 609.5,-514"/>
<text text-anchor="middle" x="566" y="-503.1" font-family="Times,serif" font-size="8.00">main</text>
<text text-anchor="middle" x="566" y="-494.1" font-family="Times,serif" font-size="8.00">main</text>
<text text-anchor="middle" x="566" y="-485.1" font-family="Times,serif" font-size="8.00">0 of 20ms (100%)</text>
</a>
</g>
</g>
<!-- N4 -->
<g id="node4" class="node">
<title>N4</title>
<g id="a_node4"><a xlink:title="unicode.IsSpace (10ms)">
<polygon fill="#edd9d5" stroke="#b22100" points="631.5,-412 434.5,-412 434.5,-326 631.5,-326 631.5,-412"/>
<text text-anchor="middle" x="533" y="-388.8" font-family="Times,serif" font-size="24.00">unicode</text>
<text text-anchor="middle" x="533" y="-362.8" font-family="Times,serif" font-size="24.00">IsSpace</text>
<text text-anchor="middle" x="533" y="-336.8" font-family="Times,serif" font-size="24.00">10ms (50.00%)</text>
</a>
</g>
</g>
<!-- N1&#45;&gt;N4 -->
<g id="edge3" class="edge">
<title>N1&#45;&gt;N4</title>
<g id="a_edge3"><a xlink:title="main.main &#45;&gt; unicode.IsSpace (10ms)">
<path fill="none" stroke="#b22100" stroke-width="3" d="M561.48,-477.88C557.66,-463.4 551.97,-441.87 546.69,-421.84"/>
<polygon fill="#b22100" stroke="#b22100" stroke-width="3" points="550.07,-420.94 544.13,-412.17 543.3,-422.73 550.07,-420.94"/>
</a>
</g>
<g id="a_edge3&#45;label"><a xlink:title="main.main &#45;&gt; unicode.IsSpace (10ms)">
<text text-anchor="middle" x="579" y="-441.3" font-family="Times,serif" font-size="14.00"> 10ms</text>
</a>
</g>
</g>
<!-- N5 -->
<g id="node5" class="node">
<title>N5</title>
<g id="a_node5"><a xlink:title="main.readbyte (10ms)">
<polygon fill="#edd9d5" stroke="#b22100" points="744.5,-387 649.5,-387 649.5,-351 744.5,-351 744.5,-387"/>
<text text-anchor="middle" x="697" y="-376.1" font-family="Times,serif" font-size="8.00">main</text>
<text text-anchor="middle" x="697" y="-367.1" font-family="Times,serif" font-size="8.00">readbyte</text>
<text text-anchor="middle" x="697" y="-358.1" font-family="Times,serif" font-size="8.00">0 of 10ms (50.00%)</text>
</a>
</g>
</g>
<!-- N1&#45;&gt;N5 -->
<g id="edge2" class="edge">
<title>N1&#45;&gt;N5</title>
<g id="a_edge2"><a xlink:title="main.main &#45;&gt; main.readbyte (10ms)">
<path fill="none" stroke="#b22100" stroke-width="3" d="M585.59,-477.72C591.84,-472.12 598.76,-465.85 605,-460 628.25,-438.21 654.15,-412.76 672.53,-394.5"/>
<polygon fill="#b22100" stroke="#b22100" stroke-width="3" points="675.3,-396.68 679.92,-387.14 670.36,-391.72 675.3,-396.68"/>
</a>
</g>
<g id="a_edge2&#45;label"><a xlink:title="main.main &#45;&gt; main.readbyte (10ms)">
<text text-anchor="middle" x="662.5" y="-448.8" font-family="Times,serif" font-size="14.00"> 10ms</text>
<text text-anchor="middle" x="662.5" y="-433.8" font-family="Times,serif" font-size="14.00"> (inline)</text>
</a>
</g>
</g>
<!-- N2 -->
<g id="node2" class="node">
<title>N2</title>
<g id="a_node2"><a xlink:title="runtime.main (20ms)">
<polygon fill="#edd5d5" stroke="#b20000" points="609.5,-650.5 522.5,-650.5 522.5,-614.5 609.5,-614.5 609.5,-650.5"/>
<text text-anchor="middle" x="566" y="-639.6" font-family="Times,serif" font-size="8.00">runtime</text>
<text text-anchor="middle" x="566" y="-630.6" font-family="Times,serif" font-size="8.00">main</text>
<text text-anchor="middle" x="566" y="-621.6" font-family="Times,serif" font-size="8.00">0 of 20ms (100%)</text>
</a>
</g>
</g>
<!-- N2&#45;&gt;N1 -->
<g id="edge1" class="edge">
<title>N2&#45;&gt;N1</title>
<g id="a_edge1"><a xlink:title="runtime.main &#45;&gt; main.main (20ms)">
<path fill="none" stroke="#b20000" stroke-width="6" d="M566,-614.47C566,-591.85 566,-551.64 566,-524.64"/>
<polygon fill="#b20000" stroke="#b20000" stroke-width="6" points="571.25,-524.32 566,-514.32 560.75,-524.32 571.25,-524.32"/>
</a>
</g>
<g id="a_edge1&#45;label"><a xlink:title="runtime.main &#45;&gt; main.main (20ms)">
<text text-anchor="middle" x="588" y="-535.8" font-family="Times,serif" font-size="14.00"> 20ms</text>
</a>
</g>
</g>
<!-- N3 -->
<g id="node3" class="node">
<title>N3</title>
<g id="a_node3"><a xlink:title="runtime.nextFreeFast (10ms)">
<polygon fill="#edd9d5" stroke="#b22100" points="795.5,-86 598.5,-86 598.5,0 795.5,0 795.5,-86"/>
<text text-anchor="middle" x="697" y="-62.8" font-family="Times,serif" font-size="24.00">runtime</text>
<text text-anchor="middle" x="697" y="-36.8" font-family="Times,serif" font-size="24.00">nextFreeFast</text>
<text text-anchor="middle" x="697" y="-10.8" font-family="Times,serif" font-size="24.00">10ms (50.00%)</text>
</a>
</g>
</g>
<!-- N7 -->
<g id="node7" class="node">
<title>N7</title>
<g id="a_node7"><a xlink:title="runtime.newobject (10ms)">
<polygon fill="#edd9d5" stroke="#b22100" points="744.5,-275 649.5,-275 649.5,-239 744.5,-239 744.5,-275"/>
<text text-anchor="middle" x="697" y="-264.1" font-family="Times,serif" font-size="8.00">runtime</text>
<text text-anchor="middle" x="697" y="-255.1" font-family="Times,serif" font-size="8.00">newobject</text>
<text text-anchor="middle" x="697" y="-246.1" font-family="Times,serif" font-size="8.00">0 of 10ms (50.00%)</text>
</a>
</g>
</g>
<!-- N5&#45;&gt;N7 -->
<g id="edge4" class="edge">
<title>N5&#45;&gt;N7</title>
<g id="a_edge4"><a xlink:title="main.readbyte &#45;&gt; runtime.newobject (10ms)">
<path fill="none" stroke="#b22100" stroke-width="3" d="M697,-350.81C697,-333.21 697,-305.61 697,-285.07"/>
<polygon fill="#b22100" stroke="#b22100" stroke-width="3" points="700.5,-285.07 697,-275.07 693.5,-285.07 700.5,-285.07"/>
</a>
</g>
<g id="a_edge4&#45;label"><a xlink:title="main.readbyte &#45;&gt; runtime.newobject (10ms)">
<text text-anchor="middle" x="719" y="-296.8" font-family="Times,serif" font-size="14.00"> 10ms</text>
</a>
</g>
</g>
<!-- N6 -->
<g id="node6" class="node">
<title>N6</title>
<g id="a_node6"><a xlink:title="runtime.mallocgc (10ms)">
<polygon fill="#edd9d5" stroke="#b22100" points="744.5,-188 649.5,-188 649.5,-152 744.5,-152 744.5,-188"/>
<text text-anchor="middle" x="697" y="-177.1" font-family="Times,serif" font-size="8.00">runtime</text>
<text text-anchor="middle" x="697" y="-168.1" font-family="Times,serif" font-size="8.00">mallocgc</text>
<text text-anchor="middle" x="697" y="-159.1" font-family="Times,serif" font-size="8.00">0 of 10ms (50.00%)</text>
</a>
</g>
</g>
<!-- N6&#45;&gt;N3 -->
<g id="edge5" class="edge">
<title>N6&#45;&gt;N3</title>
<g id="a_edge5"><a xlink:title="runtime.mallocgc &#45;&gt; runtime.nextFreeFast (10ms)">
<path fill="none" stroke="#b22100" stroke-width="3" d="M697,-151.88C697,-137.53 697,-116.26 697,-96.39"/>
<polygon fill="#b22100" stroke="#b22100" stroke-width="3" points="700.5,-96.17 697,-86.17 693.5,-96.17 700.5,-96.17"/>
</a>
</g>
<g id="a_edge5&#45;label"><a xlink:title="runtime.mallocgc &#45;&gt; runtime.nextFreeFast (10ms)">
<text text-anchor="middle" x="724.5" y="-122.8" font-family="Times,serif" font-size="14.00"> 10ms</text>
<text text-anchor="middle" x="724.5" y="-107.8" font-family="Times,serif" font-size="14.00"> (inline)</text>
</a>
</g>
</g>
<!-- N7&#45;&gt;N6 -->
<g id="edge6" class="edge">
<title>N7&#45;&gt;N6</title>
<g id="a_edge6"><a xlink:title="runtime.newobject &#45;&gt; runtime.mallocgc (10ms)">
<path fill="none" stroke="#b22100" stroke-width="3" d="M697,-238.8C697,-227.16 697,-211.55 697,-198.24"/>
<polygon fill="#b22100" stroke="#b22100" stroke-width="3" points="700.5,-198.18 697,-188.18 693.5,-198.18 700.5,-198.18"/>
</a>
</g>
<g id="a_edge6&#45;label"><a xlink:title="runtime.newobject &#45;&gt; runtime.mallocgc (10ms)">
<text text-anchor="middle" x="719" y="-209.8" font-family="Times,serif" font-size="14.00"> 10ms</text>
</a>
</g>
</g>
</g>
</g></svg>
